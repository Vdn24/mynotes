/*Это объявление расширения с именем Filter, которое добавляет новую функциональность к Stream, содержащему списки элементов типа T.
 <T> - это обобщенный тип, который позволяет использовать это расширение с любым типом данных */
extension Filter<T> on Stream<List<T>> {
  // Stream<List<T>> - Это возвращаемый тип метода filter
  // filter - Это имя метода, который будет добавлен к Stream<List<T>> через расширение
  // (bool Function(T) where) - Это параметр метода filter.
  // Он представляет собой функцию, которая принимает один аргумент типа T и возвращает булево значение (true или false).
  // Эта функция используется для тестирования каждого элемента в списке:
  // если функция возвращает true для элемента, элемент включается в результат; если false, элемент исключается.
  // => - Это оператор “стрелка” в Dart, который используется для определения однострочных функций или методов. Все, что следует за стрелкой, является телом функции
  Stream<List<T>> filter(bool Function(T) where) =>

  // map((items) => ...) - Метод map применяется к каждому элементу потока
  // items.where(where) - Здесь используется метод where списка items. 
  //Метод where - это функция высшего порядка, которая принимает другую функцию в качестве аргумента (в данном случае, это параметр where метода filter).
  // Она применяет эту функцию к каждому элементу списка items и возвращает новый итерируемый объект, содержащий только те элементы, для которых функция where вернула true
  // .toList() - После фильтрации элементов метод toList используется для преобразования итерируемого объекта обратно в список
      map((items) => items.where(where).toList());
}

/*Во Flutter, расширение (extension) — это способ добавления новой функциональности к существующему типу данных.
 Расширения позволяют вам добавлять методы и вычисляемые свойства к классам, структурам, перечислениям или другим типам данных, не изменяя исходный код типа */